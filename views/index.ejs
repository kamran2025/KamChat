<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Kam Chat</title>
  <!-- bootstrap css  -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- bootstrap icon  -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
  <!-- Google font  -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <!-- <link href="https://fonts.googleapis.com/css2?family=Inconsolata:wght@200..900&display=swap" rel="stylesheet"> -->
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">

  <style>
    body {
      font-family: 'Inter', sans-serif;
    }

    .form-control {
      box-shadow: none !important;
    }

    textarea {
      resize: none;
      padding-top: 10px !important;
    }

    textarea::placeholder {
      color: rgba(255, 255, 255, 0.5) !important;
    }

    .message-bubble {
      padding: 10px 15px;
      border-radius: 15px;
      margin-bottom: 10px;
      max-width: 70%;
      word-wrap: break-word;
    }

    .user-message {
      background-color: #007bff;
      color: white;
      margin-left: auto;
      border-top-right-radius: 5px;
    }

    .bot-message {
      background-color: #f0f0f0;
      color: #333;
      margin-right: auto;
      border-top-left-radius: 5px;
    }

    .message-container {
      margin-bottom: 15px; /* To space out user/bot message blocks */
    }
    
    .time-stamp {
      font-size: 0.75rem;
      opacity: 0.7;
    }

    .bot-message pre {
      font-family: 'Inter', sans-serif; /* Ensure font consistency */
      white-space: pre-wrap; /* Ensures text wraps and respects newlines */
      word-wrap: break-word; /* Additional safety for breaking long words */
      margin: 0; /* Remove default pre margins */
    }

  </style>
</head>

<body style="height: 100vh; background-color: #000111; color: rgba(255, 255, 255, 0.9);">
  <div class="container d-flex flex-column align-items-center bg-transparent pt-4 px-2 pb-5 position-relative">
    <!-- Navbar  -->
    <div class="navbar col-12 col-lg-10 d-flex justify-content-between mb-5">
      <div style="width: 170px;"><img
          src="https://res.cloudinary.com/dzqufw45x/image/upload/v1709628292/name-logo_sbuale.png" class="img-fluid"
          alt=""></div>
      <div class="btns ">
        <button class="btn btn-success me-1 me-md-3 fw-semibold px-4 "
          style="color: rgba(255, 255, 255, 0.9);">Login</button>
        <button class="btn btn-danger fw-semibold px-4" style="color: rgba(255, 255, 255, 0.9);">Signup</button>
      </div>
    </div>

    <!-- Main  -->
    <din class="qesAnsWrapper col-12 col-md-12 col-lg-10 col-xl-8 mb-5 pb-2">

    </din>

    <!-- chatInput  -->
    <form id="formData" class="position-fixed bottom-0 pb-4 px-3 col-12 col-md-10 col-lg-8 col-xl-6"
      style="background-color: #000111;">
      <div class="input-group mb-3 mx-auto ">
        <textarea type="text" rows="1" name="userQuestion" class="form-control border-end-0 z-2 bg-transparent"
          placeholder="Ask what you want"
          style="font-size: 18px; color: rgb(205, 202, 202); word-spacing: -5px"></textarea>
        <button id="submit-btn" type="submit"
          class="btn z-1 btn-light bg-transparent py-1 px-3 border-start-0 disabled"><i
            class="bi bi-arrow-up-circle-fill text-white fs-3"></i></button>
      </div>
    </form>

  </div>

  <!-- bootstrap script  -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

  <script>

    function scrollHandle() {
      if (document.body.scrollHeight > (window.innerHeight - 400)) {
        window.scrollTo({
          top: document.body.scrollHeight,
          left: 0,
          behavior: 'smooth'
        });
      }
    }

    const submitBtn = document.querySelector('#submit-btn');
    let inputQues = document.querySelector('#formData textarea');

    inputQues.addEventListener('input', function () {
      if (this.value != '') {
        submitBtn.classList.remove('disabled');
      } else {
        submitBtn.classList.add('disabled');
      }
    });

    async function postData(url = "", data = {}) {

      const response = await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });
      return response.json();
    }

    let qesAnsWrapper = document.querySelector('.qesAnsWrapper')
    let questionInput = document.querySelector('#formData textarea')

    submitBtn.addEventListener('click', function (e) {
      e.preventDefault();
      const userMessageText = questionInput.value.trim();
      if (!userMessageText) return;

      const currentTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

      // User message
      const userMessageContainer = document.createElement('div');
      userMessageContainer.classList.add('message-container', 'user-container', 'd-flex', 'justify-content-end');
      userMessageContainer.innerHTML = `
        <div class="message-bubble user-message">
            <h6 class='fw-bold fs-6 mb-1'>You</h6>
            <p class='mb-1' style="color: white;">${userMessageText}</p>
            <div class='text-end time-stamp'>${currentTime}</div>
        </div>
      `;
      qesAnsWrapper.appendChild(userMessageContainer);

      // Bot message placeholder with spinner
      const botMessageContainer = document.createElement('div');
      botMessageContainer.classList.add('message-container', 'bot-container', 'd-flex', 'justify-content-start');
      botMessageContainer.innerHTML = `
        <div class="message-bubble bot-message">
            <h6 class='fw-bold fs-6 mb-1'>Kam Chat</h6>
            <div class="bot-response-content">
               <div class="sppiner spinner-grow spinner-grow-sm" role="status" style="width: 16px; height: 16px; display: inline-block; vertical-align: middle;">
                 <span class="visually-hidden">Loading...</span>
               </div>
               <pre class='mb-1' style='font-size: 16px; display: inline-block; vertical-align: middle;'></pre> <!-- Removed word-spacing, text-wrap is handled by CSS -->
            </div>
            <div class='text-end time-stamp'>${currentTime}</div>
        </div>
      `;
      qesAnsWrapper.appendChild(botMessageContainer);

      scrollHandle(); // Scroll after adding user and placeholder bot message

      postData("/message", { input: userMessageText })
        .then(async (data) => {
          let resData = await data;
          const botTime = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
          
          // Update bot message with actual response
          const lastBotMessageContainer = qesAnsWrapper.querySelector('.bot-container:last-child');
          if (lastBotMessageContainer) {
            const spinner = lastBotMessageContainer.querySelector('.sppiner');
            const preElement = lastBotMessageContainer.querySelector('pre');
            const timeStampElement = lastBotMessageContainer.querySelector('.time-stamp');

            if (spinner) spinner.style.display = 'none';
            if (timeStampElement) timeStampElement.textContent = botTime;
            
            if (resData.message) {
                displayResponse(resData.message, preElement);
            } else {
                if(preElement) preElement.textContent = "Sorry, something went wrong.";
            }
          }
          questionInput.value = null;
          submitBtn.classList.add('disabled');
        });
    })

    async function displayResponse(response, outputElement) {
      // const outputElement = document.querySelector('.qesAnsWrapper').lastElementChild.lastElementChild.lastElementChild; // This needs to be more specific
      let words = response.split(' ');
      let index = 0;

      function printWord() {
        if (index < words.length) {
          outputElement.textContent += words[index] + ' ';
          index++;
          scrollHandle();
        } else {
          clearInterval(intervalId);
        }
      }
      let intervalId = setInterval(printWord, 50);
    }

  </script>

</body>

</html>